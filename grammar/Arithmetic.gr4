grammar Arithmetic;

// Lexer rules
WS : [ \t\r\n]+ -> skip;
INT : [0-9]+;
ID : [a-z]+;
ADD : '+';
SUB : '-';
DIV : '/';
MUL : '*';

// Parser rules

exp : '(' exp op=(ADD | SUB | DIV | MUL) exp ')'     # ArithExp
    | INT                                            # IntExp
    | ID                                             # IdExp
    ;

assignment : ID ' = ' exp;

output : 'print: ' ID;


// statement : assignment
//     | output
//     ;

program : (assignment | output ';')+
    ;
