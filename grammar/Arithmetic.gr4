grammar Arithmetic;

// Lexer rules
WS : [ \t\r\n]+ -> skip;
INT : [0-9]+;
ID : [a-z]+;

// Parser rules

op : '+'    # ADD
    | '-'   # SUB
    | '/'   # DIV
    | '*'   # MUL
    ;

exp : '(' exp op exp ')'    # ArithExp
    | INT                   # IntExp
    | ID                    # IdExp
    ;

assignment : ID ' = ' exp;

output : 'print: ' ID
    ;


statement : assignment
    | output
    ;

program : (statement ';')+
    ;
